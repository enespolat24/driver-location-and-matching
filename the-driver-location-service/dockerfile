# Build stage
FROM golang:1.24-alpine AS builder

# Install git and ca-certificates (needed for some go modules)
RUN apk add --no-cache git ca-certificates

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the server binary
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main cmd/server/main.go

# Build the importer binary
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o importer cmd/importer/importer.go

# Runtime stage
FROM alpine:latest

# Install ca-certificates and wget for health checks
RUN apk --no-cache add ca-certificates wget

# Create non-root user
RUN addgroup -g 1001 -S app && \
    adduser -u 1001 -S app -G app

# Set working directory
WORKDIR /app

# Copy binaries from builder stage
COPY --from=builder /app/main .
COPY --from=builder /app/importer .

# Copy CSV file
COPY Coordinates.csv .

# Change ownership to app user
RUN chown -R app:app /app

# Switch to non-root user
USER app

# Expose port (configurable via environment variable)
EXPOSE ${PORT:-8080}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:${PORT:-8080}/health || exit 1

# Run the binary
CMD ["./main"]
